#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('http');
const http = require('http');
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

const normalizedPort = normalizePort(process.env.PORT || '3000');
app.set('port', normalizedPort);

/**
 * Create HTTP server.
 */

const server = http.createServer(app, (req, res) => {
  console.log(`> createServer ${req.method} ${req.url}`)
  debug(`${req.method} ${req.url}`);
});

server.listen(normalizedPort);

server.on('listening', () => {
  const { address, family, port } = server.address();
  debug(`Listening at ${typeof address}, type: ${family}, port: ${port}`);
});

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
